{"version":3,"sources":["views/home/components/common.ts","views/home/components/SendWorldMessage.tsx","views/home/components/SendRoomMessage.tsx","components/HOC/Modal.tsx","views/home/components/PrivateRoom.tsx","views/home/Home.tsx","App.tsx","serviceWorker.ts","index.tsx","stores/rootStore.ts","views/home/Home.module.scss","views/home/components/PrivateRoom.module.scss"],"names":["FORM_ITEM_LAYOUT","labelCol","xs","span","sm","wrapperCol","FORM_ITEM_LAYOUT_SMALL","FormItem","Form","Item","SendWorldMessage","onSubmit","e","preventDefault","_assertThisInitialize","Object","assertThisInitialized","_this","conn","stores","form","props","message","getFieldsValue","send","JSON","stringify","type","setFieldsValue","this","react_default","a","createElement","row","es_form","assign","label","getFieldDecorator","input","Component","SendWorldMessageWrapper","inject","observer","create","_assertThisInitialize2","roomInfo","AntMessage","error","SendRoomMessage_FormItem","DEFAULT_STATE","visible","title","destroyOnClose","body","footer","ModalHOCWrapper","Child","_Component","ModalHOC","_getPrototypeOf2","classCallCheck","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","objectSpread","_showModal","callback","setState","handleCancel","modal","show","close","inherits","createClass","key","value","_this$state","rest","objectWithoutProperties","react","es_modal","onCancel","PrivateRoom","card","ButtonArea","MessageArea","SendRoomMessage","_ref","className","styles","es_button","onClick","RoomJoinBtn","style","paddingLeft","roomId","_ref2","roomMessages","toJS","map","m","index","withModal","_ref3","Fragment","FormInputRoomCodeWrapper","marginLeft","FormInputRoomCode","onSubmitForm","_this$props","validateFields","err","values","console","log","code","PrivateRoom_FormItem","rules","required","whitespace","justify","htmlType","Home","col","Home_OnlineUsers","WorldMessages","components_PrivateRoom","OnlineUsers","messages","components_SendWorldMessage","loadingWS","home_Home","Boolean","window","location","hostname","match","RootStore","initializerDefineProperty","_descriptor","_descriptor2","_descriptor3","_descriptor4","ws","WebSocket","onmessage","onListenMessage","bind","onclose","evt","obj","parse","data","joinRoom","leaveRoom","push","msg","pushMessage","undefined","observable","action","ReactDOM","render","mobx_react_module","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","left-side","chat-body","button-join-area"],"mappings":"oVAAMA,EAAmB,CACvBC,SAAU,CACRC,GAAI,CAAEC,KAAM,GACZC,GAAI,CAAED,KAAM,IAEdE,WAAY,CACVH,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,MAIVG,EAAyB,CAC7BL,SAAU,CACRC,GAAI,CAAEC,KAAM,GACZC,GAAI,CAAED,KAAM,IAEdE,WAAY,CACVH,GAAI,CAAEC,KAAM,IACZC,GAAI,CAAED,KAAM,MCXVI,EAAWC,IAAKC,KAMhBC,6MAKJC,SAAW,SAACC,GACVA,EAAEC,iBAD+B,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,GAGrBC,EAHqBJ,EAG/BK,OAAUD,KACDE,EAJsBN,EAI/BO,MAASD,KAEHE,EAAYF,EAAKG,iBAAjBD,QACRJ,EAAKM,KAAKC,KAAKC,UAAU,CAAEC,KAAM,EAAGL,aACpCF,EAAKQ,eAAe,CAAEN,QAAS,8EAGxB,IACCF,EAASS,KAAKR,MAAdD,KAER,OACEU,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMvB,SAAUkB,KAAKlB,UACnBmB,EAAAC,EAAAC,cAACzB,EAADQ,OAAAoB,OAAA,CAAUC,MAAM,WAAcpC,GAC3BoB,EAAKiB,kBAAkB,UAAW,GAAlCjB,CAAsCU,EAAAC,EAAAC,cAACM,EAAA,EAAD,yCArB/C,OAAOT,KAAKR,MAAMF,cAFSoB,aAiChBC,EAFiBC,YAAO,SAAPA,CAAiBC,YAASlC,IAAKmC,QAALnC,CAAcE,sBCrClEH,EAAWC,IAAKC,KAMhBC,6MAKJC,SAAW,SAACC,GACVA,EAAEC,iBAD+B,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,GAAA2B,EAAA9B,EAG/BK,OAAUD,EAHqB0B,EAGrB1B,KAAM2B,EAHeD,EAGfC,SACPzB,EAJsBN,EAI/BO,MAASD,KAENyB,GACHC,IAAWC,MAAX,6BAP+B,IASzBzB,EAAYF,EAAKG,iBAAjBD,QACRJ,EAAKM,KAAKC,KAAKC,UAAU,CAAEC,KAAM,EAAGL,aACpCF,EAAKQ,eAAe,CAAEN,QAAS,8EAGxB,IACCF,EAASS,KAAKR,MAAdD,KAER,OACEU,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMvB,SAAUkB,KAAKlB,UACnBmB,EAAAC,EAAAC,cAACgB,EAADjC,OAAAoB,OAAA,CAAUC,MAAM,WAAc9B,GAC3Bc,EAAKiB,kBAAkB,UAAW,GAAlCjB,CAAsCU,EAAAC,EAAAC,cAACM,EAAA,EAAD,yCAxB/C,OAAOT,KAAKR,MAAMF,cAFSoB,aAoChBC,EAFiBC,YAAO,SAAPA,CAAiBC,YAASlC,IAAKmC,QAALnC,CAAcE,iDC1ClEuC,EAAgB,CACpBC,SAAS,EACTC,MAAO,YACPC,gBAAgB,EAChBC,KAAMvB,EAAAC,EAAAC,cANY,kBAAMF,EAAAC,EAAAC,cAAA,oBAMlB,MACNsB,OAAQ,MAsCKC,EAnCS,SAACC,GAgCvB,OAhC2D,SAAAC,GAAA,SAAAC,IAAA,IAAAC,EAAA1C,EAAAF,OAAA6C,EAAA,EAAA7C,CAAAc,KAAA6B,GAAA,QAAAG,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAjD,EAAAF,OAAAoD,EAAA,EAAApD,CAAAc,MAAA8B,EAAA5C,OAAAqD,EAAA,EAAArD,CAAA2C,IAAAW,KAAAC,MAAAX,EAAA,CAAA9B,MAAA0C,OAAAP,MAEzDQ,MAFyDzD,OAAA0D,EAAA,EAAA1D,CAAA,GAGpDkC,GAHoDhC,EAMzDyD,WAAa,SAACF,EAAYG,GACxB1D,EAAK2D,SAAL7D,OAAA0D,EAAA,EAAA1D,CAAA,CAAgBmC,SAAS,GAASsB,KAPqBvD,EAUzD4D,aAAe,WACb5D,EAAK2D,SAAS,CAAE1B,SAAS,KAX8BjC,EAczD6D,MAAQ,CACNC,KAAM9D,EAAKyD,WACXM,MAAO/D,EAAK4D,cAhB2C5D,EAAA,OAAAF,OAAAkE,EAAA,EAAAlE,CAAA2C,EAAAD,GAAA1C,OAAAmE,EAAA,EAAAnE,CAAA2C,EAAA,EAAAyB,IAAA,SAAAC,MAAA,WAmBhD,IAAAC,EACmBxD,KAAK2C,MAAvBnB,EADDgC,EACChC,KAASiC,EADVvE,OAAAwE,EAAA,EAAAxE,CAAAsE,EAAA,UAEP,OACEvD,EAAAC,EAAAC,cAACwD,EAAA,SAAD,KACE1D,EAAAC,EAAAC,cAACwB,EAADzC,OAAAoB,OAAA,GAAWN,KAAKR,MAAhB,CAAuByD,MAAOjD,KAAKiD,SACnChD,EAAAC,EAAAC,cAACyD,EAAA,EAAD1E,OAAAoB,OAAA,GAAWmD,EAAX,CAAiBI,SAAU7D,KAAKgD,eAC7BxB,QAzBgDK,EAAA,CACpCnB,sBCHnBhC,EAAWC,IAAKC,KAYPkF,EAVK,kBAClB7D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAMzC,MAAM,gBACVrB,EAAAC,EAAAC,cAAC6D,EAAD,MACA/D,EAAAC,EAAAC,cAAC8D,EAAD,MACAhE,EAAAC,EAAAC,cAAC+D,EAAD,SAOAF,EAAapD,YAAO,SAAPA,CACjBC,YAAS,SAAAsD,GAAgB,IAAb7E,EAAa6E,EAAb7E,OACFD,EAAmBC,EAAnBD,KAAM2B,EAAa1B,EAAb0B,SAYd,OACEf,EAAAC,EAAAC,cAAA,OAAKiE,UAAWC,IAAO,qBACrBpE,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAQC,QAZQ,WAEbvD,EAIH3B,EAAKM,KAAKC,KAAKC,UAAU,CAAEC,KAAM,KAHjCT,EAAKM,KAAKC,KAAKC,UAAU,CAAEC,KAAM,MASHA,KAAK,WAC/BkB,EAA0B,aAAf,cAEff,EAAAC,EAAAC,cAACqE,EAAD,MACAvE,EAAAC,EAAAC,cAAA,WAAMa,GAAYf,EAAAC,EAAAC,cAAA,QAAMsE,MAAO,CAAEC,YAAa,KAA5B,WAA2C1D,EAAS2D,aAMxEV,EAAcrD,YAAO,SAAPA,CAClBC,YAAS,SAAA+D,GAAgB,IACfC,EADeD,EAAbtF,OACFuF,aAER,OACE5E,EAAAC,EAAAC,cAAA,OAAKiE,UAAWC,IAAO,cACpBS,YAAKD,GAAcE,IAAI,SAACC,EAAQC,GAAT,OACtBhF,EAAAC,EAAAC,cAAA,MAAImD,IAAG,QAAAZ,OAAUuC,IAAUD,EAAEvF,eAOjC+E,EAAcU,EAClBtE,YAAO,SAAPA,CACEC,YAAS,SAAAsE,GAA4B,IAAzB7F,EAAyB6F,EAAzB7F,OAAQ2D,EAAiBkC,EAAjBlC,MASlB,OARqB3D,EAAb0B,SAeCf,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkF,SAAA,MALLnF,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAQC,QARQ,WAClBtB,EAAMC,KAAK,CACT5B,MAAO,kBACPE,KAAMvB,EAAAC,EAAAC,cAACkF,EAAD,SAKwBvF,KAAK,UAAU2E,MAAO,CAAEa,WAAY,KAAlE,iBAWJD,EAA2BzE,YAAO,SAAPA,CAC/BC,YACElC,IAAKmC,QAALnC,CAAA,SAAAiD,GAAA,SAAA2D,IAAA,IAAAzD,EAAA1C,EAAAF,OAAA6C,EAAA,EAAA7C,CAAAc,KAAAuF,GAAA,QAAAvD,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAjD,EAAAF,OAAAoD,EAAA,EAAApD,CAAAc,MAAA8B,EAAA5C,OAAAqD,EAAA,EAAArD,CAAAqG,IAAA/C,KAAAC,MAAAX,EAAA,CAAA9B,MAAA0C,OAAAP,MAEIqD,aAAe,SAACzG,GACdA,EAAEC,iBADmC,IAAAyG,EAEZrG,EAAKI,MAAtBD,EAF6BkG,EAE7BlG,KAAMD,EAFuBmG,EAEvBnG,OACdC,EAAKmG,eAAe,CAAC,QAAS,SAACC,EAAKC,GAC7BD,IACHE,QAAQC,IAAI,WAAYF,GACxBtG,EAAOD,KAAKM,KAAKC,KAAKC,UAAU,CAAEC,KAAM,EAAG6E,OAAQiB,EAAOG,YARpE3G,EAAA,OAAAF,OAAAkE,EAAA,EAAAlE,CAAAqG,EAAA3D,GAAA1C,OAAAmE,EAAA,EAAAnE,CAAAqG,EAAA,EAAAjC,IAAA,SAAAC,MAAA,WAaa,IACChE,EAASS,KAAKR,MAAdD,KACR,OACEU,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAMvB,SAAUkB,KAAKwF,cACnBvF,EAAAC,EAAAC,cAAC6F,EAAD9G,OAAAoB,OAAA,CAAUC,MAAM,QAAWpC,GACxBoB,EAAKiB,kBAAkB,OAAQ,CAC9ByF,MAAO,CACL,CACEnG,KAAM,SACNoG,UAAU,EACVC,YAAY,EACZ1G,QAAS,6BANdF,CASEU,EAAAC,EAAAC,cAACM,EAAA,EAAD,QAELR,EAAAC,EAAAC,cAAC6F,EAAD,KACE/F,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKN,KAAK,OAAOsG,QAAQ,UACvBnG,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAQ+B,SAAS,SAASvG,KAAK,WAA/B,eA/BdyF,EAAA,CACkC7E,gBCjEvB4F,EApBF,WACX,OACErG,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAKjI,KAAM,IACT2B,EAAAC,EAAAC,cAACC,EAAA,EAAD,KACEH,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAKjI,KAAM,EAAG8F,UAAWC,IAAO,cAC9BpE,EAAAC,EAAAC,cAACqG,EAAD,OAEFvG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAKjI,KAAM,IACT2B,EAAAC,EAAAC,cAACsG,EAAD,SAINxG,EAAAC,EAAAC,cAACoG,EAAA,EAAD,CAAKjI,KAAM,GACT2B,EAAAC,EAAAC,cAACuG,EAAD,SAQFC,EAAc,WAClB,OACE1G,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAMzC,MAAM,eAAZ,UAKAmF,EAAgB7F,YAAO,SAAPA,CACpBC,YAAS,SAAAsD,GAAqB,IACpByC,EADoBzC,EAAlB7E,OACFsH,SAER,OACE3G,EAAAC,EAAAC,cAAA,OAAKiE,UAAWC,IAAO,cACrBpE,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,CAAMzC,MAAM,YACVrB,EAAAC,EAAAC,cAAA,OAAKiE,UAAWC,IAAO,cACpBS,YAAK8B,GAAU7B,IAAI,SAACC,EAAQC,GAAT,OAClBhF,EAAAC,EAAAC,cAAA,MAAImD,IAAG,QAAAZ,OAAUuC,IAAUD,EAAEvF,YAGjCQ,EAAAC,EAAAC,cAAC0G,EAAD,WCrCKjG,sBAAO,SAAPA,CAAiBC,YANV,SAACrB,GAGrB,OAFsBA,EAAMF,OAApBwH,UAEuB7G,EAAAC,EAAAC,cAAA,yBAAXF,EAAAC,EAAAC,cAAC4G,EAAD,UCGFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2FCVA9H,WAAS,iBCDb,SAAA+H,IAAenI,OAAA6C,EAAA,EAAA7C,CAAAc,KAAAqH,GAAAnI,OAAAoI,GAAA,EAAApI,CAAAc,KAAA,YAAAuH,EAAAvH,MAAAd,OAAAoI,GAAA,EAAApI,CAAAc,KAAA,WAAAwH,EAAAxH,MAAAd,OAAAoI,GAAA,EAAApI,CAAAc,KAAA,eAAAyH,EAAAzH,MAAAd,OAAAoI,GAAA,EAAApI,CAAAc,KAAA,WAAA0H,EAAA1H,WAefX,UAfc,EACZ,IAAMsI,EAAK,IAAIC,UAAU,0BACzBD,EAAGE,UAAY7H,KAAK8H,gBAAgBC,KAAK/H,MACzC2H,EAAGK,QAAU,SAASC,GACpBpC,QAAQC,IAAI,oBACZD,QAAQC,IAAI,QAASmC,IAEvBjI,KAAKX,KAAOsI,EACZ3H,KAAK8G,WAAY,8DASHmB,GACd,IACE,IAAMC,EAAMtI,KAAKuI,MAAMF,EAAIG,MAE3B,OADiBF,EAATpI,MAGN,KAAK,EACHE,KAAKqI,SAASH,GACd,MAGF,KAAK,EACHlI,KAAKsI,UAAUJ,GACf,MAGF,KAAK,EAEHrC,QAAQC,IAAI,sBAAuBoC,GACnClI,KAAK6E,aAAa0D,KAAKL,GACvB,MAEF,QACElI,KAAK4G,SAAS2B,KAAKL,IAIvB,MAAOhH,GACP2E,QAAQC,IAAI,mCAAoC5E,wCAIhCsH,GAClBxI,KAAK4G,SAAS2B,KAAKC,oCAGJJ,GAAW,IAClBzD,EAAWyD,EAAXzD,OACR3E,KAAKgB,SAAW,CAAE2D,UAClB3E,KAAKyI,YAAYL,qCAGDA,GAChBpI,KAAKgB,cAAW0H,EAChB1I,KAAKyI,YAAYL,oDAlDlBO,8EAAgC,4CAChCA,6EAAkC,iDAClCA,6EAAsC,6CACtCA,mHAmCAC,kHAIAA,gHAMAA,+EDxDHC,IAASC,OACP7I,EAAAC,EAAAC,cAAC4I,EAAA,EAAD,CAAczJ,OAAQA,IACpBW,EAAAC,EAAAC,cAAC6I,EAAD,OAEFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCG1InBC,EAAAC,QAAA,CAAkBC,YAAA,wBAAAC,YAAA,6CCAlBH,EAAAC,QAAA,CAAkBE,YAAA,+BAAAC,mBAAA","file":"static/js/main.94a7b9d9.chunk.js","sourcesContent":["const FORM_ITEM_LAYOUT = {\n  labelCol: {\n    xs: { span: 4 },\n    sm: { span: 4 }\n  },\n  wrapperCol: {\n    xs: { span: 16 },\n    sm: { span: 16 }\n  }\n}\n\nconst FORM_ITEM_LAYOUT_SMALL = {\n  labelCol: {\n    xs: { span: 6 },\n    sm: { span: 6 }\n  },\n  wrapperCol: {\n    xs: { span: 14 },\n    sm: { span: 14 }\n  }\n}\n\nexport { FORM_ITEM_LAYOUT, FORM_ITEM_LAYOUT_SMALL }\n","import React, { Component } from 'react'\nimport { Form, Input, Row } from 'antd'\nimport { inject, observer } from 'mobx-react'\nimport { FormComponentProps } from 'antd/lib/form'\nimport { StoresTypes } from '../../../stores'\nimport { FORM_ITEM_LAYOUT } from './common'\n\nconst FormItem = Form.Item\n\ninterface Props {\n  stores?: any\n}\n\nclass SendWorldMessage extends Component<Props & FormComponentProps> {\n  get stores(): StoresTypes {\n    return this.props.stores\n  }\n\n  onSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    const {\n      stores: { conn },\n      props: { form }\n    } = this\n    const { message } = form.getFieldsValue()\n    conn.send(JSON.stringify({ type: 0, message }))\n    form.setFieldsValue({ message: '' })\n  }\n\n  render() {\n    const { form } = this.props\n\n    return (\n      <Row>\n        <Form onSubmit={this.onSubmit}>\n          <FormItem label='message' {...FORM_ITEM_LAYOUT}>\n            {form.getFieldDecorator('message', {})(<Input />)}\n          </FormItem>\n        </Form>\n      </Row>\n    )\n  }\n}\n\nconst SendWorldMessageWrapper = inject('stores')(observer(Form.create()(SendWorldMessage)))\n\nexport default SendWorldMessageWrapper\n","import React, { Component } from 'react'\nimport { Form, Input, Row, message as AntMessage } from 'antd'\nimport { inject, observer } from 'mobx-react'\nimport { FormComponentProps } from 'antd/lib/form'\nimport { StoresTypes } from '../../../stores'\nimport { FORM_ITEM_LAYOUT_SMALL } from './common'\n\nconst FormItem = Form.Item\n\ninterface Props {\n  stores?: any\n}\n\nclass SendWorldMessage extends Component<Props & FormComponentProps> {\n  get stores(): StoresTypes {\n    return this.props.stores\n  }\n\n  onSubmit = (e: React.FormEvent) => {\n    e.preventDefault()\n    const {\n      stores: { conn, roomInfo },\n      props: { form }\n    } = this\n    if (!roomInfo) {\n      AntMessage.error(`You haven't joined a room`)\n    }\n    const { message } = form.getFieldsValue()\n    conn.send(JSON.stringify({ type: 5, message }))\n    form.setFieldsValue({ message: '' })\n  }\n\n  render() {\n    const { form } = this.props\n\n    return (\n      <Row>\n        <Form onSubmit={this.onSubmit}>\n          <FormItem label='message' {...FORM_ITEM_LAYOUT_SMALL}>\n            {form.getFieldDecorator('message', {})(<Input />)}\n          </FormItem>\n        </Form>\n      </Row>\n    )\n  }\n}\n\nconst SendWorldMessageWrapper = inject('stores')(observer(Form.create()(SendWorldMessage)))\n\nexport default SendWorldMessageWrapper\n","import React, { Component, Fragment } from 'react'\nimport { Modal } from 'antd'\n\nconst DefaultBody = () => <div>Body</div>\n\nconst DEFAULT_STATE = {\n  visible: false,\n  title: 'New Modal',\n  destroyOnClose: true,\n  body: <DefaultBody />,\n  footer: null\n}\n\nconst ModalHOCWrapper = (Child: React.ComponentType<any>) => {\n  class ModalHOC extends Component {\n    state = {\n      ...DEFAULT_STATE\n    }\n\n    _showModal = (state: any, callback: void) => {\n      this.setState({ visible: true, ...state })\n    }\n\n    handleCancel = () => {\n      this.setState({ visible: false })\n    }\n\n    modal = {\n      show: this._showModal,\n      close: this.handleCancel\n    }\n\n    render() {\n      const { body, ...rest } = this.state\n      return (\n        <Fragment>\n          <Child {...this.props} modal={this.modal} />\n          <Modal {...rest} onCancel={this.handleCancel}>\n            {body}\n          </Modal>\n        </Fragment>\n      )\n    }\n  }\n\n  return ModalHOC as any\n}\n\nexport default ModalHOCWrapper\n","import React, { Component } from 'react'\nimport { inject, observer } from 'mobx-react'\nimport { Button, Card, Form, Input, Row } from 'antd'\nimport SendRoomMessage from './SendRoomMessage'\nimport styles from './PrivateRoom.module.scss'\nimport { withModal } from '@components'\nimport { toJS } from 'mobx'\nimport { FORM_ITEM_LAYOUT } from './common'\nimport { FormComponentProps } from 'antd/lib/form'\nimport { StoresTypes } from 'src/stores'\n\nconst FormItem = Form.Item\n\nconst PrivateRoom = () => (\n  <div>\n    <Card title='Private Room'>\n      <ButtonArea />\n      <MessageArea />\n      <SendRoomMessage />\n    </Card>\n  </div>\n)\n\nexport default PrivateRoom\n\nconst ButtonArea = inject('stores')(\n  observer(({ stores }) => {\n    const { conn, roomInfo } = stores\n\n    const onClickJoin = () => {\n      // join room\n      if (!roomInfo) {\n        conn.send(JSON.stringify({ type: 1 }))\n      } else {\n        // leave room\n        conn.send(JSON.stringify({ type: 3 }))\n      }\n    }\n\n    return (\n      <div className={styles['button-join-area']}>\n        <Button onClick={onClickJoin} type='primary'>\n          {!roomInfo ? 'Quick join' : 'Leave room'}\n        </Button>\n        <RoomJoinBtn />\n        <div>{roomInfo && <span style={{ paddingLeft: 14 }}>roomId: {roomInfo.roomId}</span>}</div>\n      </div>\n    )\n  })\n)\n\nconst MessageArea = inject('stores')(\n  observer(({ stores }) => {\n    const { roomMessages } = stores\n\n    return (\n      <div className={styles['chat-body']}>\n        {toJS(roomMessages).map((m: any, index: number) => (\n          <li key={`mess-${index}`}>{m.message}</li>\n        ))}\n      </div>\n    )\n  })\n)\n\nconst RoomJoinBtn = withModal(\n  inject('stores')(\n    observer(({ stores, modal }: any) => {\n      const { roomInfo } = stores\n\n      const onClickJoin = () => {\n        modal.show({\n          title: 'Input Room Code',\n          body: <FormInputRoomCodeWrapper />\n        })\n      }\n      if (!roomInfo) {\n        return (\n          <Button onClick={onClickJoin} type='primary' style={{ marginLeft: 24 }}>\n            Join room\n          </Button>\n        )\n      } else {\n        return <></>\n      }\n    })\n  )\n)\n\nconst FormInputRoomCodeWrapper = inject('stores')(\n  observer(\n    Form.create()(\n      class FormInputRoomCode extends Component<{ stores: StoresTypes } & FormComponentProps> {\n        onSubmitForm = (e: React.FormEvent) => {\n          e.preventDefault()\n          const { form, stores } = this.props\n          form.validateFields(['code'], (err, values) => {\n            if (!err) {\n              console.log('values: ', values)\n              stores.conn.send(JSON.stringify({ type: 7, roomId: values.code }))\n            }\n          })\n        }\n\n        render() {\n          const { form } = this.props\n          return (\n            <Form onSubmit={this.onSubmitForm}>\n              <FormItem label='code' {...FORM_ITEM_LAYOUT}>\n                {form.getFieldDecorator('code', {\n                  rules: [\n                    {\n                      type: 'string',\n                      required: true,\n                      whitespace: true,\n                      message: 'Code could not be empty'\n                    }\n                  ]\n                })(<Input />)}\n              </FormItem>\n              <FormItem>\n                <Row type='flex' justify='center'>\n                  <Button htmlType='submit' type='primary'>\n                    JOIN\n                  </Button>\n                </Row>\n              </FormItem>\n            </Form>\n          )\n        }\n      }\n    )\n  )\n)\n","import React from 'react'\nimport { Row, Col, Card } from 'antd'\nimport styles from './Home.module.scss'\nimport { inject, observer } from 'mobx-react'\nimport { SendWorldMessage, PrivateRoom } from './components'\nimport { toJS } from 'mobx'\n\nconst Home = () => {\n  return (\n    <Row>\n      <Col span={16}>\n        <Row>\n          <Col span={4} className={styles['left-side']}>\n            <OnlineUsers />\n          </Col>\n          <Col span={20}>\n            <WorldMessages />\n          </Col>\n        </Row>\n      </Col>\n      <Col span={8}>\n        <PrivateRoom />\n      </Col>\n    </Row>\n  )\n}\n\nexport default Home\n\nconst OnlineUsers = () => {\n  return (\n    <div>\n      <Card title='OnlineUsers'>none</Card>\n    </div>\n  )\n}\n\nconst WorldMessages = inject('stores')(\n  observer(({ stores }: any) => {\n    const { messages } = stores\n\n    return (\n      <div className={styles['left-side']}>\n        <Card title='Messages'>\n          <div className={styles['chat-body']}>\n            {toJS(messages).map((m: any, index: number) => (\n              <li key={`mess-${index}`}>{m.message}</li>\n            ))}\n          </div>\n          <SendWorldMessage />\n        </Card>\n      </div>\n    )\n  })\n)\n","import React from 'react'\n// import Child from './Child'\nimport { Home } from './views'\nimport { inject, observer } from 'mobx-react'\nimport './antd.less'\n\nconst App: React.FC = (props: any) => {\n  const { loadingWS } = props.stores\n\n  return !loadingWS ? <Home /> : <div>Loading...</div>\n}\n\nexport default inject('stores')(observer(App))\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { rootStore } from './stores'\nimport { Provider as MobxProvider } from 'mobx-react'\n\nconst stores = new rootStore()\n\nReactDOM.render(\n  <MobxProvider stores={stores}>\n    <App />\n  </MobxProvider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","import { observable, action } from 'mobx'\n\nexport interface roomTypes {\n  roomId: string\n}\n\nclass RootStore {\n  constructor() {\n    const ws = new WebSocket('ws://localhost:8080/ws')\n    ws.onmessage = this.onListenMessage.bind(this)\n    ws.onclose = function(evt) {\n      console.log('connection close')\n      console.log('evt: ', evt)\n    }\n    this.conn = ws\n    this.loadingWS = false\n  }\n\n  @observable loadingWS: boolean = true\n  @observable messages: Array<any> = []\n  @observable roomMessages: Array<any> = []\n  @observable roomInfo?: roomTypes = undefined\n  conn: WebSocket\n\n  onListenMessage(evt: any) {\n    try {\n      const obj = JSON.parse(evt.data)\n      const { type } = obj\n      switch (type) {\n        // join room success\n        case 2: {\n          this.joinRoom(obj)\n          break\n        }\n        // leave room success\n        case 4: {\n          this.leaveRoom(obj)\n          break\n        }\n        // receive message from individual room\n        case 6: {\n          // this.leaveRoom(obj)\n          console.log('message from room: ', obj)\n          this.roomMessages.push(obj)\n          break\n        }\n        default: {\n          this.messages.push(obj)\n          break\n        }\n      }\n    } catch (error) {\n      console.log('failed while listening message: ', error)\n    }\n  }\n\n  @action pushMessage(msg: any) {\n    this.messages.push(msg)\n  }\n\n  @action joinRoom(data: any) {\n    const { roomId } = data\n    this.roomInfo = { roomId }\n    this.pushMessage(data)\n  }\n\n  @action leaveRoom(data: any) {\n    this.roomInfo = undefined\n    this.pushMessage(data)\n  }\n}\n\nexport default RootStore\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"left-side\":\"Home_left-side__29fAD\",\"chat-body\":\"Home_chat-body__18Gfp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chat-body\":\"PrivateRoom_chat-body__1nm_7\",\"button-join-area\":\"PrivateRoom_button-join-area__1PEB0\"};"],"sourceRoot":""}